{
  "_args": [
    [
      {
        "raw": "werelogs@github:scality/werelogs",
        "scope": null,
        "escapedName": "werelogs",
        "name": "werelogs",
        "rawSpec": "github:scality/werelogs",
        "spec": "github:scality/werelogs",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:scality/werelogs.git",
          "sshUrl": "git+ssh://git@github.com/scality/werelogs.git",
          "httpsUrl": "git+https://github.com/scality/werelogs.git",
          "gitUrl": "git://github.com/scality/werelogs.git",
          "shortcut": "github:scality/werelogs",
          "directUrl": "https://raw.githubusercontent.com/scality/werelogs/master/package.json"
        }
      },
      "/Users/przemek/github/S3"
    ]
  ],
  "_from": "scality/werelogs",
  "_id": "werelogs@7.0.0",
  "_inCache": true,
  "_location": "/werelogs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "werelogs@github:scality/werelogs",
    "scope": null,
    "escapedName": "werelogs",
    "name": "werelogs",
    "rawSpec": "github:scality/werelogs",
    "spec": "github:scality/werelogs",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:scality/werelogs.git",
      "sshUrl": "git+ssh://git@github.com/scality/werelogs.git",
      "httpsUrl": "git+https://github.com/scality/werelogs.git",
      "gitUrl": "git://github.com/scality/werelogs.git",
      "shortcut": "github:scality/werelogs",
      "directUrl": "https://raw.githubusercontent.com/scality/werelogs/master/package.json"
    }
  },
  "_requiredBy": [
    "/",
    "/arsenal",
    "/bucketclient",
    "/sproxydclient",
    "/utapi",
    "/vaultclient"
  ],
  "_resolved": "git://github.com/scality/werelogs.git#5564f8954c3b1f0bd50f505660a51c3d8a58c7ad",
  "_shasum": "335b08cb669a40ccfbe39d90467a3176d5d83ba5",
  "_shrinkwrap": null,
  "_spec": "werelogs@github:scality/werelogs",
  "_where": "/Users/przemek/github/S3",
  "author": {
    "name": "Giorgio Regni"
  },
  "bugs": {
    "url": "https://github.com/scality/werelogs/issues"
  },
  "dependencies": {
    "safe-json-stringify": "^1.0.3"
  },
  "description": "An efficient raw JSON logging library aimed at micro-services architectures.",
  "devDependencies": {
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.0.0",
    "eslint-config-scality": "github:scality/Guidelines",
    "eslint-plugin-react": "^4.3.0",
    "istanbul": "^1.0.0-alpha",
    "istanbul-api": "==1.0.0-alpha.9",
    "jsdoc": "^3.4.0",
    "mdlint": "^0.1.0",
    "mocha": "^3.2.0"
  },
  "engines": {
    "node": "6.9.5"
  },
  "gitHead": "5564f8954c3b1f0bd50f505660a51c3d8a58c7ad",
  "homepage": "https://github.com/scality/werelogs#readme",
  "keywords": [
    "log",
    "logs",
    "logging",
    "micro-service",
    "library",
    "JSON"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "werelogs",
  "optionalDependencies": {},
  "readme": "# WereLogs\n\n[![CircleCI][badgepub]](https://circleci.com/gh/scality/werelogs)\n[![Scality CI][badgepriv]](http://ci.ironmann.io/gh/scality/werelogs)\n\nThis repository provides a NodeJS Library that aims to be an efficient logging\nlibrary, reducing as much as possible the need to compute anything in NodeJS,\nand focusing on a simple I/O scheme. The goal here is to make the most of\nNodeJS's strengths, but relying on its I/O capacities, and avoiding any form of\ncomputation that is known to not be advantageous in Node.\n\n## Contributing\n\nIn order to contribute, please follow the\n[Contributing Guidelines](\nhttps://github.com/scality/Guidelines/blob/master/CONTRIBUTING.md).\n\n## Installing the Library\n\nIn order to install WereLogs, you can use NPM with github's HTTP url, and save\nit in your own package.json:\n\n```\n$> npm i --save scality/werelogs\n```\n\nAs the repository is currently private, you will need to provide your username\nand your password, or use the git+ssh protocol with a properly configured\nenvironment, or use the git+https protocol with your username and cleartext\npassword in the URL (which I absolutely don't recommend for security reasons).\n\n## Using the Library\n\nWerelogs is a logging library that provides both per-request and per-module\nlogging facilities, through the intermediary of the per-module Logger that\nis the default export.\n\nWerelogs may be configured only once throughout your application's lifetime,\nthrough the configuration options available in the per-module logger\nconstructor.\n\nThe per-module Logger object is used to log relevant events for a given module.\n\nThe RequestLogger object is the one you want to use for any logging operation\nrelated to an ongoing request, so you will have to pass it to any function that\nrequires it.\n\nAll logging methods (trace, debug, info, warn, error and fatal) follow the same\nprototype and usage pattern. They can take up to two parameters, the first one,\nmandatory, being a string message, and the second one, optional, being an\nobject used to provide additional information to be included in the log entry.\n\nThe RequestLogger also provides a way to include some attributes in the JSON by\ndefault for all subsequent logging calls, by explicitly inputting them only\nonce for the whole request's lifetime through the method\n`addDefaultFields`.\n\nAs the RequestLogger is a logger strongly associated to a request's processing\noperations, it provides a builtin facility to log the elapsed time in ms of the\nsaid processing of the request. This is done through a specific logging method,\n`end` that returns a prepared logging object. Using this returned object with\nthe usual logging methods will automatically compute the elapsed time from the\ninstantiation of the RequestLogger to the moment it is called, by using an\ninternal hi-res time generated at the instantiation of the logger.\n\n```javascript\nimport Logger from 'werelogs';\n\n/*\n * Here, configure your WereLogs Logger at a global level\n * It can be instantiated with a Name (for the module), and a config options\n * Object.\n *\n * This config options object contains a log level called 'level', a log\n * dumping threshold called 'dump'. The only unnecessary\n * field is the 'level' of each individual stream, as werelogs is managing\n * that on its own.\n *\n * All request loggers instantiated through this Logger will inherit its\n * configuration.\n */\nconst log = new Logger(\n    'SampleModule',\n    {\n        level: 'debug',\n        dump: 'error',\n    }\n);\n\n/*\n * First, you can use the Logger as a module-level logger, logging events\n * that happen at the module's level.\n *\n * The API of the module-level logger is the same as the API of the request\n * Logger.\n */\nlog.info('Application started.');\nlog.warn('Starting RequestLogging...', {'metadata': new Date()});\n\ndoSomething(reqLogger) {\n    /*\n     * Let's add some kind of client-related data as default attributes first\n     */\n    reqLogger.addDefaultFields({ clientIP: '127.0.0.1',\n                                 clientPort: '65535',\n                                 clientName: 'Todd'});\n\n    /*\n     * Then, you can log some data, either a string or an object, using one of\n     * the logging methods: 'trace', 'debug', 'info', 'warn', 'error', or\n     * 'fatal'.\n     */\n    reqLogger.info('This is a string log entry');\n    // This example provides additional information to include into the JSON\n    reqLogger.info('Placing bet...',\n                   { date: new Date().toISOString(),\n                     odds: [1, 1000],\n                     amount: 20000,\n    });\n}\n\nfunction processRequest() {\n    /*\n     * Now, for one specific request, we need to get a request-specific logger\n     * instance. It can be called without a request ID, and will then generate\n     * one for you. Otherwise you can give it a string id (no specific format\n     * required) or a list of string ids (that can allow request-scoping on a\n     * distributed system)\n     */\n    const reqLogger = log.newRequestLogger();\n\n    /* you need to provide your logger instance to the code that requires it,\n     * as it is not a module-wide object instance */\n    doSomething(reqLogger, ...);\n\n    ...\n\n    /*\n     * Planning for some specific data to be included in the last logging\n     * request, you could use the addDefaultFields of the end()'s object:\n     */\n    reqLogger.end().addDefaultFields({method: 'GET', client: client.getIP()})\n\n    /*\n     * This call will generate a log entry with an added elapsed_ms\n     * field. This object can only be used once, as it should only be used for\n     * the last log entry associated to this specific RequestLogger.\n     * This call will be reusing potential data fields previously added through\n     * end().addDefaultFields().\n     */\n    reqLogger.end().info('End of request.', { status: 200 });\n}\n```\n\n## Known Issues\n\nIn order to find out the known issues, it is advised to take a look at the\n[project's github page](http://github.com/scality/werelogs). There, you should\nbe able to find the issues, tagged with the releases they are impacting,\nwhether they're open or closed.\n\n## Contributing\n\nThe contributing rules for this project are defined in the associated\nCONTRIBUTING.md file.\n\n[badgepub]: https://circleci.com/gh/scality/werelogs.svg?style=svg\n[badgepriv]: http://ci.ironmann.io/gh/scality/werelogs.svg?style=svg&circle-token=a946e81ad65b99814403b5e57f017d9ecbe93f0a\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scality/werelogs.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/.bin/_mocha tests/unit",
    "ft_test": "rm -rf tests/functional/node_modules && npm pack && cp -R node_modules werelogs-*.tgz tests/functional && cd tests/functional && npm install werelogs-*.tgz && ./node_modules/.bin/mocha . multi-modules/ && cd -",
    "gendoc": "jsdoc $(git ls-files 'lib/*.js') -d doc",
    "lint": "eslint $(git ls-files '*.js')",
    "lint_md": "mdlint $(git ls-files '*.md')",
    "test": "mocha tests/unit/"
  },
  "version": "7.0.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "6.9.5"
      },
      "pkgid": "werelogs@7.0.0"
    }
  ]
}
