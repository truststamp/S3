{
  "_args": [
    [
      {
        "raw": "arsenal@github:scality/Arsenal",
        "scope": null,
        "escapedName": "arsenal",
        "name": "arsenal",
        "rawSpec": "github:scality/Arsenal",
        "spec": "github:scality/Arsenal",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:scality/Arsenal.git",
          "sshUrl": "git+ssh://git@github.com/scality/Arsenal.git",
          "httpsUrl": "git+https://github.com/scality/Arsenal.git",
          "gitUrl": "git://github.com/scality/Arsenal.git",
          "shortcut": "github:scality/Arsenal",
          "directUrl": "https://raw.githubusercontent.com/scality/Arsenal/master/package.json"
        }
      },
      "/root/S3"
    ]
  ],
  "_from": "scality/Arsenal",
  "_id": "arsenal@7.0.0",
  "_inCache": true,
  "_location": "/arsenal",
  "_phantomChildren": {
    "lodash": "4.17.4"
  },
  "_requested": {
    "raw": "arsenal@github:scality/Arsenal",
    "scope": null,
    "escapedName": "arsenal",
    "name": "arsenal",
    "rawSpec": "github:scality/Arsenal",
    "spec": "github:scality/Arsenal",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:scality/Arsenal.git",
      "sshUrl": "git+ssh://git@github.com/scality/Arsenal.git",
      "httpsUrl": "git+https://github.com/scality/Arsenal.git",
      "gitUrl": "git://github.com/scality/Arsenal.git",
      "shortcut": "github:scality/Arsenal",
      "directUrl": "https://raw.githubusercontent.com/scality/Arsenal/master/package.json"
    }
  },
  "_requiredBy": [
    "/",
    "/bucketclient",
    "/utapi",
    "/vaultclient"
  ],
  "_resolved": "git://github.com/scality/Arsenal.git#5f7ab7b290ad77bacd870d692f36f56b2e80cebb",
  "_shasum": "36c40bf56399099c033d526b31bee479fd34236b",
  "_shrinkwrap": null,
  "_spec": "arsenal@github:scality/Arsenal",
  "_where": "/root/S3",
  "author": {
    "name": "Giorgio Regni"
  },
  "bugs": {
    "url": "https://github.com/scality/Arsenal/issues"
  },
  "dependencies": {
    "ajv": "4.10.0",
    "async": "~2.1.5",
    "debug": "~2.3.3",
    "ioctl": "2.0.0",
    "ipaddr.js": "1.2.0",
    "level": "~1.6.0",
    "level-sublevel": "~6.6.1",
    "socket.io": "~1.7.3",
    "socket.io-client": "~1.7.3",
    "utf8": "2.1.2",
    "uuid": "~3.0.1",
    "werelogs": "github:scality/werelogs"
  },
  "description": "Common utilities for the S3 project components",
  "devDependencies": {
    "eslint": "2.13.1",
    "eslint-config-airbnb": "6.2.0",
    "eslint-config-scality": "github:scality/Guidelines",
    "eslint-plugin-react": "^4.3.0",
    "lolex": "1.5.2",
    "mocha": "2.5.3",
    "temp": "0.8.3"
  },
  "engines": {
    "node": "6.9.5"
  },
  "gitHead": "5f7ab7b290ad77bacd870d692f36f56b2e80cebb",
  "homepage": "https://github.com/scality/Arsenal#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "arsenal",
  "optionalDependencies": {
    "ioctl": "2.0.0"
  },
  "private": true,
  "readme": "# Arsenal\n\n[![CircleCI][badgepub]](https://circleci.com/gh/scality/Arsenal)\n[![Scality CI][badgepriv]](http://ci.ironmann.io/gh/scality/Arsenal)\n\nCommon utilities for the S3 project components\n\nWithin this repository, you will be able to find the shared libraries for the\nmultiple components making up the whole Project.\n\n* [Guidelines](#guidelines)\n* [Shuffle](#shuffle) to shuffle an array.\n* [Errors](#errors) load an object of errors instances.\n    - [errors/arsenalErrors.json](errors/arsenalErrors.json)\n\n## Guidelines\n\nPlease read our coding and workflow guidelines at\n[scality/Guidelines](https://github.com/scality/Guidelines).\n\n### Contributing\n\nIn order to contribute, please follow the\n[Contributing Guidelines](\nhttps://github.com/scality/Guidelines/blob/master/CONTRIBUTING.md).\n\n## Shuffle\n\n### Usage\n\n``` js\nimport { shuffle } from 'arsenal';\n\nlet array = [1, 2, 3, 4, 5];\n\nshuffle(array);\n\nconsole.log(array);\n\n//[5, 3, 1, 2, 4]\n```\n\n## Errors\n\n### Usage\n\n``` js\nimport { errors } from 'arsenal';\n\nconsole.log(errors.AccessDenied);\n\n//{ [Error: AccessDenied]\n//    code: 403,\n//    description: 'Access Denied',\n//    AccessDenied: true }\n\n```\n\n## Clustering\n\nThe clustering class can be used to set up a cluster of workers. The class will\ncreate at least 1 worker, will log any worker event (started, exited).\nThe class also provides a watchdog which restarts the workers in case of\nfailure until the stop() method is called.\n\n### Usage\n\n#### Simple\n\n```\nimport { Clustering } from 'arsenal';\n\nconst cluster = new Clustering(clusterSize, logger);\ncluster.start(current => {\n    // Put here the logic of every worker.\n    // 'current' is the Clustering instance, worker id is accessible by\n    // current.getIndex()\n});\n```\n\nThe callback will be called every time a worker is started/restarted.\n\n#### Handle exit\n\n```\nimport { Clustering } from 'arsenal';\n\nconst cluster = new Clustering(clusterSize, logger);\ncluster.start(current => {\n    // Put here the logic of every worker.\n    // 'current' is the Clustering instance, worker id is accessible by\n    // current.getIndex()\n}).onExit(current => {\n    if (current.isMaster()) {\n        // Master process exiting\n    } else {\n        const id = current.getIndex();\n        // Worker (id) exiting\n    }\n});\n```\n\nYou can handle exit event on both master and workers by calling the\n'onExit' method and setting the callback. This allows release of resources\nor save state before exiting the process.\n\n#### Silencing a singnal\n\n```\nimport { Clustering } from 'arsenal';\n\nconst cluster = new Clustering(clusterSize, logger);\ncluster.start(current => {\n    // Put here the logic of every worker.\n    // 'current' is the Clustering instance, worker id is accessible by\n    // current.getIndex()\n}).onExit((current, signal) => {\n    if (signal !== 'SIGTERM') {\n        process.exit(current.getStatus());\n    }\n});\n```\n\nYou can silence stop signals, by simply not exiting on the exit callback\n\n#### Shutdown timeout\n\n```\nimport { Clustering } from 'arsenal';\n\nconst cluster = new Clustering(clusterSize, logger, 1000);\ncluster.start(current => {\n    // Put here the logic of every worker.\n    // 'current' is the Clustering instance, worker id is accessible by\n    // current.getIndex()\n}).onExit((current, signal) => {\n    if (signal === 'SIGTERM') {\n        // releasing resources\n    }\n});\n```\n\nBy default, the shutdown timeout is set to 5000 milliseconds. This timeout is\nused only when you explicitly call the stop() method. This window is\nused to let the application release its resources, but if timeout occurs\nbefore the application has finished it's cleanup, a 'SIGKILL' signal is send\nto the process (which results in an immediate termination, and this signal\ncan't be caught).\n\n[badgepub]: https://circleci.com/gh/scality/Arsenal.svg?style=svg\n[badgepriv]: http://ci.ironmann.io/gh/scality/Arsenal.svg?style=svg&circle-token=c3d2570682cba6763a97ea0bc87521941413d75c\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scality/Arsenal.git"
  },
  "scripts": {
    "ft_test": "find tests/functional -name \"*.js\" | grep -v \"utils/\" | xargs mocha --timeout 120000",
    "lint": "eslint $(git ls-files '*.js')",
    "lint_md": "mdlint $(git ls-files '*.md')",
    "lint_yml": "yamllint $(git ls-files '*.yml')",
    "test": "mocha --recursive --timeout 5500 tests/unit"
  },
  "version": "7.0.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "6.9.5"
      },
      "pkgid": "arsenal@7.0.0"
    }
  ]
}
