{
  "_args": [
    [
      {
        "raw": "s3blaster@github:scality/s3blaster",
        "scope": null,
        "escapedName": "s3blaster",
        "name": "s3blaster",
        "rawSpec": "github:scality/s3blaster",
        "spec": "github:scality/s3blaster",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:scality/s3blaster.git",
          "sshUrl": "git+ssh://git@github.com/scality/s3blaster.git",
          "httpsUrl": "git+https://github.com/scality/s3blaster.git",
          "gitUrl": "git://github.com/scality/s3blaster.git",
          "shortcut": "github:scality/s3blaster",
          "directUrl": "https://raw.githubusercontent.com/scality/s3blaster/master/package.json"
        }
      },
      "/root/S3"
    ]
  ],
  "_from": "scality/s3blaster",
  "_id": "s3blaster@0.0.1",
  "_inCache": true,
  "_location": "/s3blaster",
  "_phantomChildren": {},
  "_requested": {
    "raw": "s3blaster@github:scality/s3blaster",
    "scope": null,
    "escapedName": "s3blaster",
    "name": "s3blaster",
    "rawSpec": "github:scality/s3blaster",
    "spec": "github:scality/s3blaster",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:scality/s3blaster.git",
      "sshUrl": "git+ssh://git@github.com/scality/s3blaster.git",
      "httpsUrl": "git+https://github.com/scality/s3blaster.git",
      "gitUrl": "git://github.com/scality/s3blaster.git",
      "shortcut": "github:scality/s3blaster",
      "directUrl": "https://raw.githubusercontent.com/scality/s3blaster/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/scality/s3blaster.git#7943d8ae41d394ea1d2756acda6779acee414715",
  "_shasum": "d7294365eae1289b25c6dea8333a81b2781de5f1",
  "_shrinkwrap": null,
  "_spec": "s3blaster@github:scality/s3blaster",
  "_where": "/root/S3",
  "author": {
    "name": "Giorgio Regni",
    "email": "giorgio.regni@scality.com",
    "url": "http://www.scality.com/"
  },
  "bugs": {
    "url": "https://github.com/scality/s3blaster/issues"
  },
  "contributors": [
    {
      "name": "Lam Pham Sy",
      "email": "lam.pham-sy@scality.com"
    }
  ],
  "dependencies": {
    "async": "~1.4.2",
    "aws-sdk": "^2.2.23",
    "commander": "^2.9.0",
    "generic-pool": "^2.4.2",
    "mocha": "^2.3.3",
    "readline-sync": "^1.4.1",
    "ssh2": "^0.5.0",
    "underscore": "^1.8.3",
    "utf8": "~2.1.1"
  },
  "description": "s3blaster measures performance of S3 Servers",
  "devDependencies": {
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.0.0",
    "eslint-config-scality": "github:scality/Guidelines"
  },
  "engines": {
    "node": "^4.5.0"
  },
  "gitHead": "7943d8ae41d394ea1d2756acda6779acee414715",
  "homepage": "https://github.com/scality/s3blaster#readme",
  "keywords": [
    "s3",
    "performance"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "s3blaster",
  "optionalDependencies": {},
  "readme": "# S3Blaster program\n\nS3Blaster program measures performance of S3 servers. For a given test scenario,\nS3Blaster emits requests to S3 servers. By collecting responses, S3Blaster\ncomputes different metrics to measure performance of S3.\n\n## Performance metrics\n\nS3Blaster computes two performance metrics:\n\n* Latency of a request\n\n    Latency of a request is the interval between the time the request is sent to\nS3 and the time S3Blaster receives the request's response. S3Blaster\ncomputes different statistics on request latencies: average, standard-deviation,\npercentiles.\n\n* Number of operations per second\n\n    This is the number of responses that S3Blaster receives per second.\nS3Blaster computes average number of operations/s.\n\n## Working schema\n\n![Schema](./img/s3blaster.png)\n\nFigure 1: Working schema of S3Blaster program\n\nA working schema of S3Blaster is shown in Figure 1. Note, if there is no fork\noperation (clusters), S3Blaster workers in the schema are replaced by the\nS3Blaster Master. Roles of each component are described below.\n\n### S3Blaster Master\n\nBesides forking workers (if relevant), S3Blaster Master does following jobs:\n\n* Monitoring resources' consuming (CPU & Memory usage) of running processes on\n    all servers.\n\n* Gathering statistics results computed from all workers.\n\n* Forwarding obtained results to `Plotter` that plots appropriated graphs.\n\n### S3Blaster Worker\n\n* Based on programmed scenarios, each worker sends requests to S3 Servers and\n    then computes performance metrics based on responses received from the\n    servers.\n\n* Forwarding obtained results to `Plotter` that plots appropriated graphs.\n\n### Plotter\n\nThe component displays performance metrics and monitored resources' consuming\non graphs.\n\n## Installation\n\nSimple as `npm install`\n\n### Plot dependencies\n\nOutput graphs would be created using `gnuplot` program. To install it on Ubuntu\n\n```\nsudo apt-get install libcairo2-dev\nsudo apt-get install libpango1.0-dev\nsudo apt-get install gnuplot\n```\n\nFor other OS, see Cairo (https://cairographics.org/download/) and\ngnuplot (http://www.gnuplot.info/download.html)\n\n## Program structure\n\nThe program consists of three main files:\n\n* `s3blaster.js`\n    is the **core** of S3Blaster. S3Blaster master does the following jobs:\n    * Forking S3Blaster workers (if relevant)\n    * Gathering statistics results computed from all workers\n    * Storing statistics in files that are used for plotting graphs. There are\n    2 files `.txt` containing statistics whose suffix names are\n    *_ssm* (for system monitoring) and *_summary* (for summary results).\n\n    Whereas, S3Blaster worker does the following jobs:\n    * Sending/receiving requests to/from S3\n    * Calculating statistics on request latency, number of operations/s\n    * Storing statistics in files that are used for plotting graphs. There are\n    5 files `.txt` containing statistics whose suffix names are\n    *_live*, *_stats*, *_thread*, *_pdf_func*, *_cdf_func*.\n\n* `config.js`\n    get all input parameters for S3Blaster. All input parameters for s3blaster\n    can be assigned via the following ways with a decreasing priority\n    level, i.e. parameter will get value given by the highest priority one:\n\n    - command line\n    - a JSON file defined by `--config` command, `config.json` by default\n    - initialized in `config.js` file\n\n    For credential keys `accessKeyId` and `secretAccessKey`, they can be\n    assigned by the following ways with a decreasing priority level:\n    - command line:\n\n    ```\n    --accessKeyId = your_access_key_id\n    --secretAccessKey = your_secret_access_key\n    ```\n\n    - config JSON file, in \"acc\" sub-object:\n\n    ```\n    \"accessKeyId\": \"your_access_key_id\"\n    \"secretAccessKey\": \"your_secret_access_key\"\n    ```\n\n    - environment variable:\n\n    ```\n    ACCESSKEYID=your_access_key_id\n    SECRETACCESSKEY=your_secret_access_key\n    ```\n\n    - credential file defined by `--accFile`, default file `~/.s3cfg`\n\n    ```\n    access_key = your_access_key_id\n    secret_key = your_secret_access_key\n    ```\n\n* `plotter.js`\n    plots graphs showing statistics measured by S3Blaster. Plotter generates\n    two graphs for *_ssm* and *_summary* files sent from S3Blaster Master.\n    For each S3Blaster worker, Plotter could generate up to 5 graph files\n    whose suffix names are *_stats*, *_thread*, *_size*, *_pdf*, *_cdf*.\n\nAn additional file `runS3Blaster.js` allows executing S3Blaster with input\nparameters stored in an object that is used for pre-programmed tests (see\n    [Pre-programmed tests](#pre-programmed-tests))\n\nBesides, monitoring of resources' consuming of processes on servers and\nmonintoring storage size of Metadata store are implemented in files in `ssm`\nfolder.\n\n## How to run S3Blaster\n\nS3Blaster is executed with default input parameters with: `npm start`\n\nBy default, output results are stored in a sub-folder of the `results`\ndirectory. A default name for the sub-folder is the current date. A specified\noutput folder can be defined by using the environment variable FOLDERNAME, e.g.\n\n`FOLDERNAME=release/today npm start`\n\nThen, all output files will be stored in the `./results/release/today`\ndirectory.\n\n### Plot manipulation\n\nThere are two plot actions applicable for simulation results. Configuration\ninfo and results of a simulation is stored in an `.id` file whose prefix is\nsame as stats files.\n\n* Re-plot graphs\n\n    All graphs of a simulation can be re-plotted with modifying on\n\n    - Prefix for output graph files\n    - Type of output files (pdf or png)\n    - Font size\n    - Font type.\n\n    CLI for re-plot:\n\n    ```\n    node lib/plotter.js --replot path_to_id_file --outputPrefixName <name>\n    --outputType <type> --fontType <type> --fontSize <size>\n    ```\n\n* Performance comparison\n\n    Performance of different tests are shown in a same file. The graph file\n    contains two pages for latency and #operations/s performance metrics.\n\n    In each page, graphs are placed in a layout where each column corresponds\n    to a request type, e.g. put, get\n\n    Each graph displays performances for an object size. The x-axis is number of\n    parallel requests. Each curve in the graph shows performance of each test.\n\n    CLI for comparison:\n\n    ```\n    node lib/plotter.js --compare\n    path_to_id_file_test_1,path_to_id_file_test_2,path_to_id_file_test_3\n    ```\n\n### Main input parameters\n\nThere are multiple configurable input parameters as shown in\n`config.json` file. However, some of them should be correctly\nassigned for an appropriated measurement:\n\nName | Related keys\n--- | ---\nCredential keys | `accessKeyId`, `secretAccessKey`\nS3 servers' address | `host`, `port`\nRequests for measuring | `requests`\nSchedule of requests | `schedule`\nBuckets | `bucketPrefix`, `bucketsNb`\nObjects | `objectsNb`, `sizes`, `unit`\nMeasurement time | `runTime`, `observationsNb`\nMonitoring | `ssm`, `servers`, `user`, `publicKey`, `privateKey`, `mdPath`\nMultipart Upload | `partSizes`\n\nTo run S3Blaster with other specified parameters, please see [configuration]\n(./CONFIGURATION.md).\n\n## Output: statistics and graphs\n\nFor each test, s3blaster generates files containing statistics results (`.txt`)\nand graph files (`.pdf` or `.png`). Main configuration  information is shown on\ntop of each statistics/graph file.\n\n* Summary results\n\n    Summary results are shown in *_summary* text/graph files. It contains\nperformance metrics that are computed based on results from all workers (if\nrelevant). Moreover, if the monitoring of servers was active, the file show\namount of storage using by metadata. The amount is computed as the difference\nof meta-stores between before and after test.\n\n* Detailed result files\n\n    For each S3Blaster worker, there are five `.txt` files and five graph files.\n\n    * *_live* file contains real-time performance metrics. The 'real-time' means\n    that the metrics are calculated from requests/responses received within the\n    last duration time. The time duration is determined by `rate` in the\n    `lib/config.js` file. Results of the file will be used to generate *_live*\n    graph.\n\n    * *_stats* file contains performance metrics computed after some given\n    number of requests successes. A graph file is generated for each such file.\n\n    * *_thread* file contains statistics vs. number of parallel requests and\n        number of object sizes. A graph file is generated for each such file.\n\n    * *_pdf_func* file contains estimated probability distribution function. A\n    graph file is generated for each such file.\n\n    * *_cdf_func* file contains estimated cumulative distribution function. A\n    graph file is generated for each such file.\n\nIn each graph file, there could be some figures that are located in rows and\ncolumns layout. Graphs on a row/column have a same configuration parameter,\ne.g. same type of request, same object size etc.\n\n* Monitored resources' consuming\n\n    If the monitoring of resources' consuming by running processes was active,\ncollected  are stored in *_ssm.txt* file. These results combined with *_live*\nstatistics from each worker will be shown in a single graph *_live* file. In\nthat file, measured performance and resources' consuming are shown versus\nelapsed time.\n\n## Examples\n\n* Example 1\n\nSingle connector, single bucket with 1000 objects, mixed requests, object 8KB,\nrun in 100 seconds\n\n```javascript\nnode index.js --host localhost --port 8000\n--bucketsNb 1 --objectsNb 1000 --sizes 8 --unit KB --requests\nput,get,delete --schedule mixed --runTime 100 --output example1\n```\n\n* Example 2\n\nHaproxy connector with port 80, multiple buckets, sequential requests, object\n8KB & 100KB\n\n```javascript\nnode index.js --host localhost --port 80\n--bucketsNb 100 --objectsNb 1000 --sizes 8,100 --unit KB --requests\nput,get,delete --schedule each --runTime 100 --output example2\n```\n\n* Example 3\n\n*Balancing* connectors, 10 forks, monitoring servers, multiple buckets,\nmixed requests with their proportion and range\n\n```javascript\nnode index.js --host balancing --port 8000 --forksNb 10\n--bucketsNb 100 --objectsNb 1000 --sizes 8 --unit KB --requests\nput,get --proprReqs 2,8 --range 0:500,500:1000 --schedule each --ssm true\n--runTime 100 --output example3\n```\n\n## Pre-programmed tests\n\nThere are six pre-programmed tests as below.\n\n Parameters | S3Simple | S3Standard | S3Full | S3Sizes | S3Parallel | S3MPU\n --- | --- | --- | --- | --- | --- | ---\n S3 Connector | single | single, balancing | single, haproxy, balancing | single | single | single\n #S3blaster workers  | 1 | 1 & multiple | 1 & multiple | 1 | 1 & multiple | 1\n Bucket | single & multiple |  single & multiple | single & multiple | single & multiple | single & multiple | single & multiple\n Requests | `put`, `get`, `delete` | `put`, `get`, `delete` | `put`, `list`, `get`, `get ACL`, `delete`, `combine` | `put`, `get`, `delete` | `put`, `get`, `delete` | `multi-upload`, `get`, `delete`\n Schedule | `sequential` & `mixed` | `sequential`| `sequential` & `mixed` | `sequential` & `mixed` | `sequential` | `sequential` & `mixed`\n Object size | `OB`, `10KB` | `OB`, `10KB`, `1MB` | `OB`, `10KB`, `512KB`, `1MB`, `10MB` | `0, 10, .., 90KB` & `100, 200, .., 900KB` & `1, 2, .., 10MB` | `OB`, `10KB`, `1MB` | `1GB` (part size `5MB`, `20MB`)\n #parallel requests | 64 | 1, 32, 64, 128, .., 2048 | 1, 8, 16, 32, .., 2048 | 1, 50 | 32, 64, 128, .., 10240 | 1, 2, 4, 8, 16\n Run time (s) | 60 | 120 | 240 | 600 | 600 | 1200\n |\n **Execution cmd** | `npm run s3simple` | `npm run s3standard` | `npm run s3full` | `npm run s3sizes` | `npm run s3parallel` | `npm run s3mpu`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scality/s3blaster.git"
  },
  "scripts": {
    "lint": "eslint $(git ls-files '*.js')",
    "lint_md": "mdlint $(git ls-files '*.md')",
    "s3full": "mocha tests/performance/s3full.js",
    "s3mpu": "mocha tests/performance/s3mpu.js",
    "s3parallel": "mocha tests/performance/s3parallel.js",
    "s3simple": "mocha tests/performance/s3simple.js",
    "s3sizes": "mocha tests/performance/s3sizes.js",
    "s3standard": "mocha tests/performance/s3standard.js",
    "start": "node index.js"
  },
  "version": "0.0.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "^4.5.0"
      },
      "pkgid": "s3blaster@0.0.1"
    }
  ]
}
